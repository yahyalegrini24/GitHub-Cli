import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import inquirer from "inquirer";
import { listRepos, getGitHubUsername } from "./GitHup.js";
import axios from "axios";

const AI_API_URL = "https://api.groq.com/openai/v1/chat/completions";
const AI_API_KEY = process.env.AI_API_KEY;

if (!AI_API_KEY) {
  console.error("‚ùå AI API Key not found. Set AI_API_KEY in your environment.");
  process.exit(1);
}

// Function to read key files and limit file size
function readProjectFiles(dir, basePath = dir) {
  const fileContents = {};
  const importantFiles = ["package.json", "index.js", "app.js", "README.md"]; // Key files
  const files = fs.readdirSync(dir);

  for (const file of files) {
    const filePath = path.join(dir, file);
    const relativePath = path.relative(basePath, filePath);

    if (fs.statSync(filePath).isDirectory()) continue; // Skip directories

    if (importantFiles.includes(file) || file.endsWith(".js") || file.endsWith(".json")) {
      let content = fs.readFileSync(filePath, "utf-8");
      const lines = content.split("\n");

      // If file is large, truncate to first 50 + last 50 lines
      if (lines.length > 200) {
        content = lines.slice(0, 50).join("\n") + "\n...\n" + lines.slice(-50).join("\n");
      }

      fileContents[relativePath] = content;
    }
  }
  return fileContents;
}

async function generateAIReadme() {
  const username = await getGitHubUsername();
  if (!username) {
    console.error("‚ùå Failed to fetch GitHub username.");
    return;
  }

  // Get user's repositories
  const repos = await listRepos();
  if (repos.length === 0) {
    console.log("‚ùå No repositories found.");
    return;
  }

  // Let user choose a repo
  const { selectedRepo } = await inquirer.prompt([
    {
      type: "list",
      name: "selectedRepo",
      message: "üìå Choose a repository to generate README:",
      choices: repos.map((repo) => repo.name),
    },
  ]);

  const repoDir = path.join(process.cwd(), selectedRepo);

  // Clone repo if not already present
  if (!fs.existsSync(repoDir)) {
    console.log("üì• Cloning repository...");
    execSync(`git clone https://github.com/${username}/${selectedRepo}.git`, { stdio: "inherit" });
  }

  // Read key project files
  const projectFiles = readProjectFiles(repoDir);

  console.log("ü§ñ Generating README...");

  try {
    const aiResponse = await axios.post(
      AI_API_URL,
      {
        model: "llama3-70b-8192",
        messages: [
          {
            role: "system",
            content: "You are an AI that generates professional README.md files for GitHub projects. Your goal is to analyze the provided files, understand the project, and write clear documentation."
          },
          {
            role: "user",
            content: `Generate a README.md for the GitHub repository "${selectedRepo}". 
            
            The project contains the following important files:
            ${Object.keys(projectFiles).join(", ")}

            Here are the key file contents:
            ${Object.entries(projectFiles).map(([file, content]) => `### ${file}:\n${content}`).join("\n\n")}

            Your README should include:
            - **Project Title**
            - **Overview of the project (what it does, main features)**
            - **Installation instructions**
            - **Dependencies and how to install them (extract from package.json)**
            - **Usage guide with examples**
            - **Explanation of key files**
            - **Project structure**
            - **Contributing guidelines (if relevant)**
            - **License section**

            Keep the README concise and developer-friendly.`
          }
        ]
      },
      {
        headers: {
          Authorization: `Bearer ${AI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const readmeContent = aiResponse.data.choices?.[0]?.message?.content || "# Project Title\n\nGenerated by AI.";

    // Save README file
    const readmePath = path.join(repoDir, "README.md");
    fs.writeFileSync(readmePath, readmeContent);
    console.log("‚úÖ README.md generated successfully!");

    // Commit & Push to GitHub
    console.log("üöÄ Pushing README to GitHub...");
    execSync(`cd ${repoDir} && git add README.md && git commit -m "Generated README with AI" && git push`, { stdio: "inherit" });

    console.log("üéâ README successfully pushed to GitHub!");
  } catch (error) {
    console.error("‚ùå Error generating README:", error.response?.data || error.message);
  }
}

export { generateAIReadme };
